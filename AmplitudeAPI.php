<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Amplitude {

    protected $CI;

    const AMPLITUDE_API_URL = 'https://api2.amplitude.com/2/httpapi';

    /**
     * The API key to use for all events generated by this instance
     *
     * @var string
     */
    protected $apiKey;

    /**
     * The user ID to use for events generated by this instance
     *
     * @var string
     */
    private $userId;

    /**
     * The user data to set on the next event logged to Amplitude
     *
     * @var array
     */
    protected $userProperties = [];

    /**
     * The device ID to use for events generated by this instance
     *
     * @var string
     */
    protected $deviceId;
  
    public function __construct() {
        $this->CI =& get_instance();
        $this->apiKey = $this->CI->config->item('amplitude_api_key');
    }

    /**
     *
     * Requres $this->event and $this->apiKey to be set, otherwise it throws an exception.
     */
    public function ampLogEvent($eventName, $eventData = NULL) {
        /* if ( 'production' != $this->CI->config->item('environment') ){
            return ['status' => false, 'message' => "No valid site"];
        } */
        $userId = $this->CI->session->userdata('email');
        if (empty($eventName) || empty($this->apiKey) || empty($userId)) {
            return ['status' => false, 'message' => "No event name or api key"];
        }
        $ch = curl_init(static::AMPLITUDE_API_URL);

        if (!$ch) {
            // Could be a number of PHP environment problems, log a critical error
            return ['status' => false, 'message' => 'Call to curl_init(' . static::AMPLITUDE_API_URL . ') failed, unable to send Amplitude event'];
        }
        $event = [];
        $event['user_id'] = $userId;
        $event['event_type'] = $eventName;
        $event['event_properties'] = isset($eventData) ? $eventData : [];
        
        $postFields = [
            'api_key' => $this->apiKey,
            'events' => array($event)
        ];
        if(isset($_SERVER['HTTP_REFERER']) && !empty($_SERVER['HTTP_REFERER'])){
            $url_components = parse_url($_SERVER['HTTP_REFERER']);
            // Use parse_str() function to parse the
            // string passed via URL
            if(isset($url_components['query']) && !empty($url_components['query'])){
                parse_str($url_components['query'], $params);
                $eventData = array_merge($event['event_properties'], $params);
            }
            
        }
        $activityData = [
            'user_id' => $this->CI->session->userdata('user_id'),
            'event_name' => $eventName,
            'event_data' => isset($eventData) ? json_encode($eventData) : "",
            'created_at' => date("Y-m-d H:i:s")
        ];
        $this->CI->db->insert('users_activity_log', $activityData);

        /* set the content type json */
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Accept:*/*','Content-Type: application/json'));
		curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
        /* set return type json */
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($postFields));
        $response = curl_exec($ch);
        $curlErrno = curl_errno($ch);
        if ($curlErrno) {
            return ['status' => false, 'message' => 'Curl error: ' . curl_error($ch)];
        } else {
            $httpCode = curl_getinfo($ch, \CURLINFO_HTTP_CODE);
            if($httpCode === 200){
                return ['status' => true, 'message' => 'Amplitude HTTP API response: ' . $response];
            }else{
                return ['status' => false, 'message' => $response];
            }
        }
        curl_close($ch);
    } 

}
